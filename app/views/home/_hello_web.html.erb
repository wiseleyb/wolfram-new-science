<script type="text/processing" target="processing-canvas">

int rows = 100;
int cols = rows * 3;
    
rules = new rule[8];
// solid pyramid
// rules[0] = {1,1,1, 1};
// rules[1] = {1,1,0, 1};
// rules[2] = {1,0,1, 1};
// rules[3] = {1,0,0, 1};
// rules[4] = {0,1,1, 1};
// rules[5] = {0,1,0, 1};
// rules[6] = {0,0,1, 1};
// rules[7] = {0,0,0, 0};
rules[0] = {1,1,1, 0};
rules[1] = {1,1,0, 0};
rules[2] = {1,0,1, 0};
rules[3] = {1,0,0, 1};
rules[4] = {0,1,1, 1};
rules[5] = {0,1,0, 1};
rules[6] = {0,0,1, 1};
rules[7] = {0,0,0, 0};

cells = new int[cols][rows];
for(int x=0; x < cols; x++)
  cells[x][0] = 0;
cells[cols/2][0] = 1;
for(int y=1; y < rows; y++) {
  for(int x=1; x < cols -1; x++) {
    cells[x][y] = 0;
    for(int rule=0; rule < 8; rule++) {
      if (cells[x-1][y-1] == rules[rule][0] && cells[x][y-1] == rules[rule][1] && cells[x+1][y-1] == rules[rule][2]) {
        cells[x][y] = rules[rule][3];
      }
    }
  }
}

void setup()
{
  scale = .3
  size (rows*40*scale, cols*5*scale);
}

void draw()
{
  drawGrid();
  // fillBox(cols/2,0, 1);
  
  for(int y = 0; y < rows; y++) 
    for(int x = 0; x < cols; x++) 
      fillBox(x,y,cells[x][y]);
  // for(int rule = 0; rule < 8; rule++) {
  //   println('bob');
  //   println(rules[rule].slice(0,2));
  //   println(cells.slice(x-1, x+1)[y-1]);
  //   // if (rules[rule].slice(0,2) == cells.slice(x-1,x+1)[y-1]) {
  //   //   fillBox(x,y,rules[rule][3]);
  //   // }
  // }
  
}

void drawGrid() 
{
  background (250, 250, 250);
  stroke(190, 190, 190);
  h = box_h();
  w = box_w();
  
  for(int i = 0; i < rows; i++)
  {
    line(0, i*h, width, i*h);
  }

  for(int i = 0; i < cols; i++)
  {
    line (i*w,0,i*w, height);
  }
}

void fillBox(x,y, val)
{
  if (val == 1)
    fill(100,100,100);
  else
    fill(250,250,250);
    
  rect(x*box_w(), y*box_h(), box_w(), box_h());
  // cells[x][y] = 1;
}

float box_h() { return (float)height/rows; }
float box_w() { return (float)width/cols;    }

</script>
<canvas id="processing-canvas"> </canvas>